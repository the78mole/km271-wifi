name: KM217-WiFi Hardware Release

on:
  push:
    branches: [ main ]
    paths:
      - 'KM217-WiFi/**'
      - 'EXTENSIONS/ETH_W5500/**'
      - 'DOC/**'
      - '.github/workflows/release.yml'

env:
  RELEASE_TAG: v${{ github.run_number }}-$(date +'%Y%m%d')

jobs:
  hardware-build:
    name: üîß Hardware Build & Export
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/the78mole/kicaddev-docker:latest
    
    strategy:
      matrix:
        project:
          - name: "KM217-WiFi"
            path: "KM217-WiFi"
            description: "Main KM217-WiFi Board"
          - name: "ETH_W5500"
            path: "EXTENSIONS/ETH_W5500"
            description: "Ethernet Extension Board"
      fail-fast: false
      
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üîç Check KiCad Project Files
      run: |
        echo "üîç Checking KiCad project files for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Check if required files exist
        for file in "${{ matrix.project.name }}.kicad_pro" "${{ matrix.project.name }}.kicad_sch" "${{ matrix.project.name }}.kicad_pcb"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Error: Required file $file not found!"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done
        
        # Check file permissions
        ls -la ${{ matrix.project.name }}.*
        
    - name: üßπ Clean Export Directory
      run: |
        echo "üßπ Cleaning export directories for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Create/clean export directories
        mkdir -p Export/Gerbers
        mkdir -p Export/Drill
        mkdir -p Export/PDF
        mkdir -p Export/Images
        mkdir -p Export/3D
        
        # Clean old files
        rm -f Export/Gerbers/*
        rm -f Export/Drill/*
        rm -f Export/PDF/*
        rm -f Export/Images/*
        rm -f Export/3D/*
        
    - name: üìê Export Schematics PDF
      run: |
        echo "üìê Exporting schematic to PDF for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        kicad-cli sch export pdf \
          --output "Export/PDF/${{ matrix.project.name }}-Schematics.pdf" \
          ${{ matrix.project.name }}.kicad_sch
          
        # Verify export
        if [ -f "Export/PDF/${{ matrix.project.name }}-Schematics.pdf" ]; then
          echo "‚úÖ Schematic PDF exported successfully"
          ls -lh Export/PDF/${{ matrix.project.name }}-Schematics.pdf
        else
          echo "‚ùå Error: Schematic PDF export failed!"
          exit 1
        fi
        
    - name: üîß Export Gerber Files
      run: |
        echo "üîß Exporting Gerber files for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Export Gerber files
        kicad-cli pcb export gerbers \
          --output Export/Gerbers/ \
          --layers "F.Cu,B.Cu,F.Paste,B.Paste,F.Silkscreen,B.Silkscreen,F.Mask,B.Mask,Edge.Cuts" \
          --precision 6 \
          --no-x2 \
          --use-drill-file-origin \
          ${{ matrix.project.name }}.kicad_pcb
          
        # Export drill files separately for better control
        kicad-cli pcb export drill \
          --output Export/Drill/ \
          --format gerber \
          --drill-origin plot \
          --gerber-precision 6 \
          ${{ matrix.project.name }}.kicad_pcb
          
        # List generated files
        echo "üìã Generated Gerber files:"
        ls -la Export/Gerbers/
        echo "üìã Generated Drill files:"
        ls -la Export/Drill/
        
    - name: üìÑ Export PCB PDF
      run: |
        echo "üìÑ Exporting PCB layout to PDF for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Export PCB top layer
        kicad-cli pcb export pdf \
          --output "Export/PDF/${{ matrix.project.name }}-PCB-Top.pdf" \
          --layers "F.Cu,F.Silkscreen,F.Mask,Edge.Cuts" \
          ${{ matrix.project.name }}.kicad_pcb
          
        # Export PCB bottom layer  
        kicad-cli pcb export pdf \
          --output "Export/PDF/${{ matrix.project.name }}-PCB-Bottom.pdf" \
          --layers "B.Cu,B.Silkscreen,B.Mask,Edge.Cuts" \
          ${{ matrix.project.name }}.kicad_pcb
          
        # Verify exports
        for pdf in "Export/PDF/${{ matrix.project.name }}-PCB-Top.pdf" "Export/PDF/${{ matrix.project.name }}-PCB-Bottom.pdf"; do
          if [ -f "$pdf" ]; then
            echo "‚úÖ $(basename $pdf) exported successfully"
            ls -lh "$pdf"
          else
            echo "‚ùå Error: $(basename $pdf) export failed!"
            exit 1
          fi
        done
        
    - name: üñºÔ∏è Export PCB Images
      run: |
        echo "üñºÔ∏è Exporting PCB images for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Export assembly diagram (top)
        kicad-cli pcb export svg \
          --output "Export/Images/${{ matrix.project.name }}-Assembly-Top.svg" \
          --layers "F.Cu,F.Silkscreen,F.Mask,Edge.Cuts" \
          --exclude-drawing-sheet \
          ${{ matrix.project.name }}.kicad_pcb
          
        # Export assembly diagram (bottom)
        kicad-cli pcb export svg \
          --output "Export/Images/${{ matrix.project.name }}-Assembly-Bottom.svg" \
          --layers "B.Cu,B.Silkscreen,B.Mask,Edge.Cuts" \
          --exclude-drawing-sheet \
          ${{ matrix.project.name }}.kicad_pcb
          
        # Convert SVGs to PNG for better compatibility
        if command -v convert >/dev/null 2>&1; then
          convert "Export/Images/${{ matrix.project.name }}-Assembly-Top.svg" "Export/Images/${{ matrix.project.name }}-Assembly-Top.png"
          convert "Export/Images/${{ matrix.project.name }}-Assembly-Bottom.svg" "Export/Images/${{ matrix.project.name }}-Assembly-Bottom.png"
          echo "‚úÖ PNG images generated"
        else
          echo "‚ö†Ô∏è ImageMagick not available, skipping PNG conversion"
        fi
        
        ls -la Export/Images/
        
    - name: üéØ Export 3D Models
      run: |
        echo "üéØ Exporting 3D models for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Export STEP file for 3D CAD (ignore warnings about missing 3D models)
        kicad-cli pcb export step \
          --output "Export/3D/${{ matrix.project.name }}.step" \
          --drill-origin \
          --grid-origin \
          ${{ matrix.project.name }}.kicad_pcb || {
            echo "‚ö†Ô∏è STEP export completed with warnings (missing 3D models)"
            # Check if file was actually created despite warnings
            if [ -f "Export/3D/${{ matrix.project.name }}.step" ]; then
              echo "‚úÖ STEP file created successfully despite warnings"
            else
              echo "‚ùå STEP export failed completely"
              exit 1
            fi
          }
          
        echo "‚úÖ STEP model exported"
        ls -la Export/3D/
        
    - name: üìä Generate Production Summary
      run: |
        echo "üìä Generating production summary for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Create production summary
        cat > Export/PRODUCTION_SUMMARY.md << EOF
        # ${{ matrix.project.name }} Production Files
        
        Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Git Commit: $(echo "${GITHUB_SHA}" | cut -c1-8)
        Project: ${{ matrix.project.description }}
        Release: ${{ github.ref_name }}
        
        ## üìê Schematic Files
        - \`${{ matrix.project.name }}-Schematics.pdf\` - Complete schematic documentation
        
        ## üîß Manufacturing Files
        
        ### Gerber Files (Export/Gerbers/)
        $(ls -1 Export/Gerbers/ | sed 's/^/- /')
        
        ### Drill Files (Export/Drill/)
        $(ls -1 Export/Drill/ | sed 's/^/- /')
        
        ## üìÑ Documentation
        - \`${{ matrix.project.name }}-PCB-Top.pdf\` - Top layer layout
        - \`${{ matrix.project.name }}-PCB-Bottom.pdf\` - Bottom layer layout
        
        ## üñºÔ∏è Assembly Images
        $(ls -1 Export/Images/ | sed 's/^/- /')
        
        ## üéØ 3D Models
        $(ls -1 Export/3D/ | sed 's/^/- /')
        
        ## üìã File Sizes
        \`\`\`
        $(find Export/ -type f -exec ls -lh {} \; | awk '{print $5, $9}' | sort -k2)
        \`\`\`
        
        ## ‚ö†Ô∏è Notes
        - Gerber files are generated with 6-digit precision
        - Drill files use Gerber format for better compatibility
        - All files are ready for production use
        - STEP file included for 3D visualization and mechanical design
        
        EOF
        
        echo "‚úÖ Production summary generated"
        
    - name: üß™ Validate Export Files
      run: |
        echo "üß™ Validating exported files for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}/Export"
        
        # Check if critical files exist and have reasonable sizes
        critical_files="PDF/${{ matrix.project.name }}-Schematics.pdf PDF/${{ matrix.project.name }}-PCB-Top.pdf PDF/${{ matrix.project.name }}-PCB-Bottom.pdf 3D/${{ matrix.project.name }}.step"
        
        for file in $critical_files; do
          if [ -f "$file" ]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            if [ "$size" -gt 1000 ]; then
              echo "‚úÖ $file ($size bytes)"
            else
              echo "‚ö†Ô∏è $file seems too small ($size bytes)"
            fi
          else
            echo "‚ùå Missing: $file"
            exit 1
          fi
        done
        
        # Check Gerber files
        gerber_count=$(ls -1 Gerbers/*.g* 2>/dev/null | wc -l || echo "0")
        if [ "$gerber_count" -lt 5 ]; then
          echo "‚ö†Ô∏è Only $gerber_count Gerber files found, expected at least 5"
        else
          echo "‚úÖ $gerber_count Gerber files generated"
        fi
        
        echo "üéâ File validation completed"
        
    - name: üì¶ Create Release Package
      run: |
        echo "üì¶ Creating release package for ${{ matrix.project.description }}..."
        cd "${{ matrix.project.path }}"
        
        # Create release directory structure
        mkdir -p ../release-staging/${{ matrix.project.name }}
        
        # Copy all export files with proper structure
        cp -r Export/* ../release-staging/${{ matrix.project.name }}/
        
        # Create a release-specific README
        cat > ../release-staging/${{ matrix.project.name }}/README.md << EOF
        # ${{ matrix.project.name }} Hardware Release
        
        **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
        **Git Commit**: $(echo "${GITHUB_SHA}" | cut -c1-8)  
        **Release**: ${{ github.ref_name }}  
        **Project**: ${{ matrix.project.description }}
        
        ## üìÅ Directory Structure
        
        - **Gerbers/**: PCB manufacturing files (Gerber format)
        - **Drill/**: Drill files for PCB manufacturing  
        - **PDF/**: Documentation (schematics and PCB layouts)
        - **Images/**: Assembly diagrams (SVG/PNG format)
        - **3D/**: 3D models (STEP format)
        
        ## üè≠ Manufacturing Instructions
        
        1. **PCB Manufacturing**: Upload all files from \`Gerbers/\` and \`Drill/\` directories to your PCB manufacturer
        2. **Layer Stack**: Standard 2-layer PCB
        3. **Drill Files**: Use Gerber format drill files for best compatibility
        4. **Assembly**: Refer to PDF files and assembly images for component placement
        
        ## üìã Quality Check
        
        All files have been automatically validated:
        - ‚úÖ Gerber files generated with 6-digit precision
        - ‚úÖ Drill files in Gerber format for compatibility
        - ‚úÖ PDF documentation includes schematics and PCB layouts
        - ‚úÖ 3D STEP file for mechanical verification
        - ‚úÖ Assembly images for production reference
        
        ## üîß Technical Specifications
        
        See \`PRODUCTION_SUMMARY.md\` for detailed file information and specifications.
        
        ---
        
        **Note**: This is an automated release build. All files are production-ready.
        EOF
        
        echo "‚úÖ Release package created"
        ls -la ../release-staging/${{ matrix.project.name }}/
        
    - name: üì§ Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-release-v${{ github.run_number }}
        path: |
          release-staging/${{ matrix.project.name }}/
        retention-days: 90
        
  documentation-build:
    name: üìö Documentation Build
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/the78mole/kicaddev-docker:latest
      
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîç Check Documentation Files
      run: |
        echo "üîç Checking documentation files..."
        cd DOC
        
        # List all documentation files
        echo "üìã Available documentation files:"
        ls -la
        
        # Check critical documentation  
        if [ -f "Getting_Started.md" ]; then
          echo "‚úÖ Found: Getting_Started.md"
          wc -l "Getting_Started.md"
        else
          echo "‚ö†Ô∏è Missing: Getting_Started.md"
        fi
        
        if [ -f "Erste_Schritte.md" ]; then
          echo "‚úÖ Found: Erste_Schritte.md"
          wc -l "Erste_Schritte.md"
        else
          echo "‚ö†Ô∏è Missing: Erste_Schritte.md"
        fi
        
        if [ -f "Hardware Description.md" ]; then
          echo "‚úÖ Found: Hardware Description.md"
          wc -l "Hardware Description.md"
        else
          echo "‚ö†Ô∏è Missing: Hardware Description.md"
        fi
        
    - name: üìñ Build AsciiDoc Documentation
      run: |
        echo "üìñ Building AsciiDoc documentation..."
        cd DOC
        
        # Build AsciiDoc documentation
        for file in *.adoc; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" .adoc)
            echo "Building $file..."
            
            if command -v asciidoctor >/dev/null 2>&1; then
              # Generate HTML
              asciidoctor -b html5 -o "${filename}_Generated.html" "$file"
              echo "‚úÖ HTML generated: ${filename}_Generated.html"
              
              # Generate PDF if possible
              if command -v asciidoctor-pdf >/dev/null 2>&1; then
                asciidoctor-pdf -o "${filename}_Generated.pdf" "$file"
                echo "‚úÖ PDF generated: ${filename}_Generated.pdf"
              else
                echo "‚ÑπÔ∏è asciidoctor-pdf not available, skipping PDF generation"
              fi
            else
              echo "‚ÑπÔ∏è asciidoctor not available, skipping AsciiDoc build"
            fi
          fi
        done
        
        # List generated files
        echo "üìã Generated AsciiDoc files:"
        ls -la *_Generated.* 2>/dev/null || echo "No generated files found"
        
    - name: üìù Generate LaTeX Documentation
      run: |
        echo "üìù Generating LaTeX documentation..."
        cd DOC
        
        if [ -f "Erste_Schritte.tex" ]; then
          echo "Building Erste_Schritte.tex..."
          
          # Build PDF (might need multiple passes)
          if command -v pdflatex >/dev/null 2>&1; then
            # Try to continue on errors to avoid workflow failure
            pdflatex -interaction=nonstopmode Erste_Schritte.tex || echo "‚ö†Ô∏è LaTeX build encountered issues, continuing..."
            pdflatex -interaction=nonstopmode Erste_Schritte.tex || echo "‚ö†Ô∏è LaTeX second pass encountered issues, continuing..."  # Second pass for references
            
            # Check if PDF was generated
            if [ -f "Erste_Schritte.pdf" ]; then
              echo "‚úÖ LaTeX PDF generated successfully"
            else
              echo "‚ö†Ô∏è LaTeX PDF generation failed, but continuing workflow"
            fi
          else
            echo "‚ÑπÔ∏è pdflatex not available, skipping LaTeX build"
          fi
        else
          echo "‚ÑπÔ∏è No LaTeX files found"
        fi
        
    - name: üì¶ Package Documentation for Release
      run: |
        echo "üì¶ Packaging documentation for release..."
        cd DOC
        
        # Create release documentation structure
        mkdir -p ../release-staging/Documentation
        
        # Copy all documentation files
        cp -r * ../release-staging/Documentation/ 2>/dev/null || true
        
        # Create documentation index
        cat > ../release-staging/Documentation/README.md << EOF
        # KM271-WiFi Documentation Release
        
        **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
        **Git Commit**: $(echo "${GITHUB_SHA}" | cut -c1-8)  
        **Release**: ${{ github.ref_name }}
        
        ## üìö Available Documentation
        
        ### Getting Started Guides
        - **Getting_Started.md** - English getting started guide
        - **Getting_Started_Generated.html** - HTML version (if available)
        - **Getting_Started_Generated.pdf** - PDF version (if available)
        - **Erste_Schritte.md** - German getting started guide
        - **Erste_Schritte.pdf** - LaTeX-generated PDF (if available)
        
        ### Technical Documentation
        - **Hardware Description.md** - Detailed hardware documentation
        - **Hardware Description.pdf** - PDF version
        
        ### Datasheets and References
        - Various component datasheets (PDF format)
        - Protocol specifications
        - Technical references
        
        ## üìñ Format Information
        
        - **Markdown (.md)**: Raw documentation files
        - **HTML**: Web-viewable documentation with enhanced formatting
        - **PDF**: Print-ready documentation
        - **AsciiDoc (.adoc)**: Source files for advanced documentation
        
        ## üîó Quick Links
        
        - [Getting Started (EN)](Getting_Started.md)
        - [Erste Schritte (DE)](Erste_Schritte.md)
        - [Hardware Description](Hardware%20Description.md)
        
        ---
        
        **Note**: This documentation package is automatically generated and synchronized with the hardware release.
        EOF
        
        echo "‚úÖ Documentation package created"
        ls -la ../release-staging/Documentation/
        
    - name: üì§ Upload Documentation Release
      uses: actions/upload-artifact@v4
      with:
        name: Documentation-release-v${{ github.run_number }}
        path: |
          release-staging/Documentation/
        retention-days: 90
        
  create-release:
    name: üöÄ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [hardware-build, documentation-build]
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üì• Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
        
    - name: üì¶ Prepare Release Assets
      run: |
        echo "üì¶ Preparing release assets..."
        
        # Create release directory
        mkdir -p final-release
        
        # Package hardware releases
        cd release-artifacts
        
        # Create ZIP files for each hardware project
        for project in KM217-WiFi ETH_W5500; do
          if [ -d "${project}-release-v${{ github.run_number }}" ]; then
            echo "Packaging ${project}..."
            cd "${project}-release-v${{ github.run_number }}"
            zip -r "../../final-release/${project}-HardwareRelease-v${{ github.run_number }}.zip" . -x "*.DS_Store"
            cd ..
          fi
        done
        
        # Package documentation
        if [ -d "Documentation-release-v${{ github.run_number }}" ]; then
          echo "Packaging Documentation..."
          cd "Documentation-release-v${{ github.run_number }}"
          zip -r "../../final-release/KM271-WiFi-Documentation-v${{ github.run_number }}.zip" . -x "*.DS_Store"
          cd ..
        fi
        
        cd ../final-release
        echo "üìã Final release assets:"
        ls -la
        
        # Calculate checksums
        echo "üîê Generating checksums..."
        for file in *.zip; do
          if [ -f "$file" ]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        
        echo "üìã Checksums:"
        cat checksums.txt
        
    - name: üìù Generate Release Notes
      run: |
        echo "üìù Generating release notes..."
        
        # Get recent commits for changelog
        CHANGELOG=$(git log --oneline -10 --pretty=format:"- %s" | head -5)
        
        cat > release-notes.md << EOF
        # KM271-WiFi Hardware Release v${{ github.run_number }}
        
        **Release Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
        **Git Commit**: $(echo "${GITHUB_SHA}" | cut -c1-8)  
        **Branch**: ${{ github.ref_name }}
        
        ## üîß Hardware Components
        
        This release includes production-ready files for:
        
        ### üìã KM217-WiFi Main Board
        - Complete Gerber files for PCB manufacturing
        - Drill files in Gerber format
        - Schematic and PCB layout documentation (PDF)
        - 3D STEP model for mechanical integration
        - Assembly diagrams and component placement guides
        
        ### üìã ETH_W5500 Extension Board
        - Complete Gerber files for PCB manufacturing
        - Drill files in Gerber format
        - Schematic and PCB layout documentation (PDF)
        - 3D STEP model for mechanical integration
        - Assembly diagrams and component placement guides
        
        ## üìö Documentation
        
        - Complete user documentation (English/German)
        - Hardware description and technical specifications
        - Getting started guides
        - Component datasheets and references
        
        ## üì¶ Release Assets
        
        | Asset | Description | Format |
        |-------|-------------|---------|
        | \`KM217-WiFi-HardwareRelease-v${{ github.run_number }}.zip\` | Main board manufacturing files | ZIP |
        | \`ETH_W5500-HardwareRelease-v${{ github.run_number }}.zip\` | Extension board manufacturing files | ZIP |
        | \`KM271-WiFi-Documentation-v${{ github.run_number }}.zip\` | Complete documentation package | ZIP |
        
        ## üîê File Integrity
        
        All release assets include SHA256 checksums for integrity verification. See \`checksums.txt\` for details.
        
        ## üè≠ Manufacturing Ready
        
        All hardware files in this release are:
        - ‚úÖ Validated and tested
        - ‚úÖ Generated with production-grade settings
        - ‚úÖ Ready for PCB manufacturing
        - ‚úÖ Include complete documentation
        
        ## üìã Recent Changes
        
        ${CHANGELOG}
        
        ## üÜò Support
        
        For questions or issues with this release, please:
        - Check the included documentation
        - Review the hardware description files
        - Open an issue on GitHub if problems persist
        
        ---
        
        **Automated Release** - Generated by GitHub Actions
        EOF
        
        echo "Release Notes:"
        cat release-notes.md
        
    - name: üöÄ Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: ${{ ! env.ACT }}
      with:
        tag_name: v${{ github.run_number }}-${{ github.run_id }}
        name: KM271-WiFi Hardware Release v${{ github.run_number }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          final-release/*.zip
          final-release/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üìä Release Summary
      run: |
        echo "üìä Release Summary"
        echo "=================="
        echo "Release Tag: v${{ github.run_number }}-${{ github.run_id }}"
        echo "Commit: $(echo "${GITHUB_SHA}" | cut -c1-8)"
        echo "Assets:"
        ls -la final-release/
        echo ""
        echo "‚úÖ Release created successfully!"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ github.run_number }}-${{ github.run_id }}"
